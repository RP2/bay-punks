---
import Layout from "../../layouts/Layout.astro";
import { Card } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { CardContent } from "@/components/ui/card";
import artists from "../../data/artists.json";
import concerts from "../../data/concerts.json";
import venues from "../../data/venues.json";

// generate all artist pages at build time
export async function getStaticPaths() {
  return artists.artists.map((artist) => ({
    params: { slug: artist.id },
    props: { artist },
  }));
}

// get the artist from props
const { artist } = Astro.props;

// helper to normalize text (remove special characters, lowercase)
function normalizeText(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, "")
    .trim();
}

// helper to find venue ID from venue name
function findVenueId(venueName: string): string | null {
  const venue = venues.venues.find(
    (v) => normalizeText(v.name) === normalizeText(venueName),
  );
  return venue?.id || null;
}

// get all shows for this artist (upcoming only)
const today = new Date();
today.setHours(0, 0, 0, 0);

const artistShows = concerts.shows
  .flatMap((show) =>
    show.events
      .filter((event) =>
        event.bands.some(
          (band) => normalizeText(band.text) === normalizeText(artist.name),
        ),
      )
      .map((event) => ({
        ...event,
        date: show.normalizedDate,
        humanDate: show.day,
      })),
  )
  .filter((show) => new Date(show.date) >= today)
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
---

<Layout
  title={artist.name}
  description={`Upcoming shows for ${artist.name} in the Bay Area`}
>
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <a
        href="/"
        class="text-muted-foreground hover:text-foreground mb-4 inline-flex items-center text-sm hover:underline"
      >
        ‚Üê Back to calendar
      </a>
      <h1 class="text-4xl font-bold">{artist.name}</h1>
    </div>

    <div class="grid grid-cols-1 gap-8 md:grid-cols-2">
      <Card>
        <CardContent className="p-6">
          <h2 class="mb-4 text-2xl font-semibold">Artist Info</h2>
          <dl class="space-y-2">
            <div>
              <dt class="text-muted-foreground text-sm font-medium">
                Total Shows
              </dt>
              <dd class="text-lg">{artist.showCount}</dd>
            </div>
            <div>
              <dt class="text-muted-foreground text-sm font-medium">
                First Seen
              </dt>
              <dd class="text-lg">
                {new Date(artist.firstSeen).toLocaleDateString()}
              </dd>
            </div>
            <div>
              <dt class="text-muted-foreground text-sm font-medium">
                Last Seen
              </dt>
              <dd class="text-lg">
                {new Date(artist.lastSeen).toLocaleDateString()}
              </dd>
            </div>
            {
              artist.aliases.length > 1 && (
                <div>
                  <dt class="text-muted-foreground text-sm font-medium">
                    Also Known As
                  </dt>
                  <dd class="text-lg">{artist.aliases.join(", ")}</dd>
                </div>
              )
            }
            {
              (artist.spotifyUrl || artist.searchUrl) && (
                <div>
                  <dt class="text-muted-foreground text-sm font-medium">
                    Listen
                  </dt>
                  <dd class="text-lg">
                    <a
                      href={artist.spotifyUrl || artist.searchUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center gap-2 text-green-600 transition-colors hover:text-green-700 hover:underline"
                    >
                      <svg
                        class="h-4 w-4"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                      >
                        <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.02.6-1.14 4.32-1.32 9.48-1.08 13.02 1.62.42.3.6.84.3 1.2zm.12-3.36c-3.84-2.28-10.14-2.52-13.8-1.38-.6.18-1.26-.12-1.44-.72-.18-.6.12-1.26.72-1.44 4.2-1.32 11.1-1.08 15.48 1.56.54.32.72 1.02.42 1.56-.36.54-1.08.72-1.38.42z" />
                      </svg>
                      {artist.spotifyUrl ? "Spotify" : "Search on Spotify"}
                    </a>
                  </dd>
                </div>
              )
            }
          </dl>
        </CardContent>
      </Card>

      <Card>
        <CardContent className="p-6">
          <h2 class="mb-4 text-2xl font-semibold">Venues</h2>
          <ul class="space-y-2">
            {
              artist.venues.map((venue) => {
                const venueId = findVenueId(venue);
                return (
                  <li class="text-lg">
                    {venueId ? (
                      <a
                        href={`/venue/${venueId}`}
                        class="text-primary hover:underline"
                      >
                        {venue}
                      </a>
                    ) : (
                      venue
                    )}
                  </li>
                );
              })
            }
          </ul>
        </CardContent>
      </Card>
    </div>

    <Card className="mt-8">
      <CardContent className="p-6">
        <h2 class="mb-4 text-2xl font-semibold">Upcoming Shows</h2>
        <ScrollArea className="h-[400px]">
          {
            artistShows.length > 0 ? (
              <ul class="space-y-4">
                {artistShows.map((show) => {
                  const venueId = findVenueId(show.venue?.text || "");
                  return (
                    <li class="border-b pb-4 last:border-0">
                      <div class="flex items-start justify-between">
                        <div class="flex-1">
                          <div class="text-lg font-medium">
                            {venueId ? (
                              <a
                                href={`/venue/${venueId}`}
                                class="text-primary hover:underline"
                              >
                                {show.venue?.text}
                              </a>
                            ) : (
                              show.venue?.text
                            )}
                          </div>
                          <div class="text-muted-foreground text-sm">
                            <a
                              href={`/day/${show.date}`}
                              class="text-primary hover:underline"
                            >
                              {show.humanDate}
                            </a>
                          </div>
                          {show.extra && (
                            <div class="text-muted-foreground mt-1 text-sm">
                              {show.extra}
                            </div>
                          )}
                        </div>
                      </div>
                    </li>
                  );
                })}
              </ul>
            ) : (
              <div class="text-muted-foreground py-8 text-center">
                No upcoming shows scheduled
              </div>
            )
          }
        </ScrollArea>
      </CardContent>
    </Card>
  </div>
</Layout>
