---
import Layout from "../../layouts/Layout.astro";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import concerts from "../../data/calendar.json";
import artists from "../../data/artists.json";
import { getVenueId, getArtistId } from "../../lib/data-utils";
import { AddToCalendarButton } from "../../components/AddToCalendarButton";

// generate all day pages at build time (only for today and future dates)
export async function getStaticPaths() {
  const today = new Date();
  const todayISOString =
    today.getFullYear() +
    "-" +
    String(today.getMonth() + 1).padStart(2, "0") +
    "-" +
    String(today.getDate()).padStart(2, "0");

  return concerts.shows
    .filter((show) => show.normalizedDate >= todayISOString)
    .map((show) => ({
      params: { slug: show.normalizedDate },
      props: { day: show },
    }));
}

// get the day from props
const { day } = Astro.props;

// helper to format day title (without year)
function formatDayTitle(dateStr: string): string {
  // parse date components to avoid timezone issues
  const [year, month, day] = dateStr.split("-").map(Number);
  // create date at noon to avoid any potential timezone edge cases
  const date = new Date(year, month - 1, day, 12, 0, 0);
  return date.toLocaleDateString("en-US", {
    weekday: "long",
    month: "long",
    day: "numeric",
    timeZone: "America/Los_Angeles", // explicit Bay Area timezone
  });
}

// helper to get just the year
function getYear(dateStr: string): string {
  const [year] = dateStr.split("-").map(Number);
  return year.toString();
}

const formattedDayTitle = formatDayTitle(day.normalizedDate);
const year = getYear(day.normalizedDate);
---

<Layout
  title={formattedDayTitle}
  description={`Punk shows on ${formattedDayTitle} ${year} in the Bay Area`}
>
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <a
        href="/"
        class="text-muted-foreground hover:text-foreground mb-4 inline-flex items-center text-sm hover:underline"
      >
        ‚Üê Back to calendar
      </a>
      <h1 class="text-4xl font-bold">{formattedDayTitle}</h1>
      <p class="text-muted-foreground text-lg">{year}</p>
    </div>

    <div class="space-y-6">
      <div class="flex items-center justify-between">
        <h2 class="text-2xl font-semibold">
          Events ({day.events.length})
        </h2>
      </div>

      <div class="grid grid-cols-1 gap-4 lg:grid-cols-2">
        {
          day.events.map((event) => (
            <Card>
              <CardContent className="p-6">
                <div class="space-y-4">
                  <div class="flex items-start justify-between">
                    <h3 class="text-primary text-xl font-semibold">
                      {(() => {
                        const venueId = getVenueId(event.venue);
                        return venueId ? (
                          <a
                            class="hover:underline"
                            href={`/venue/${venueId}/`}
                          >
                            {event.venue.text}
                          </a>
                        ) : (
                          event.venue.text
                        );
                      })()}
                    </h3>
                  </div>

                  <div>
                    <h4 class="mb-2 font-medium">Artists</h4>
                    <div class="flex flex-wrap gap-2">
                      {event.bands.map((band, index) => {
                        const artistId = getArtistId(band);
                        let canonicalName = band.text;
                        if (artistId) {
                          const artist = artists.artists.find(
                            (a) => a.id === artistId,
                          );
                          if (artist) canonicalName = artist.name;
                        }
                        return (
                          <span class="bg-muted text-muted-foreground rounded-md px-2 py-1 text-sm">
                            {artistId ? (
                              <a
                                class="hover:underline"
                                href={`/artist/${artistId}/`}
                              >
                                {canonicalName}
                              </a>
                            ) : (
                              band.text
                            )}
                          </span>
                        );
                      })}
                    </div>
                  </div>

                  {event.extra && (
                    <div>
                      <h4 class="mb-2 font-medium">Additional Info</h4>
                      <p class="text-muted-foreground text-sm">{event.extra}</p>
                    </div>
                  )}
                  <div>
                    <AddToCalendarButton
                      client:load
                      title={event.bands.map((band) => band.text).join(", ")}
                      date={day.normalizedDate}
                      venue={String(event.venue.text)}
                      description={event.extra ? String(event.extra) : ""}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
