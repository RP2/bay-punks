---
import Layout from "../layouts/Layout.astro";
import Key from "../components/Key.astro";
import ArtistList from "../components/ArtistList";
import VenueList from "../components/VenueList";
import DayList from "../components/DayList.astro";
import { TabsWrapper } from "../components/TabsWrapper";
---

<Layout
  title="Bay Punks - Upcoming Live Music Shows in the Bay Area"
  description="Discover upcoming punk, rock, and live music concerts in the San Francisco Bay Area. Find your next favorite artists, venues, and shows updated weekly from FooPee's The List."
>
  <h1 class="text-5xl font-bold uppercase sm:text-8xl">Upcoming Shows</h1>
  <p class="text-muted-foreground text-sm">
    Find your next favorite artists in the Bay Area.
  </p>
  <section class="mt-4 flex flex-col gap-2 text-lg sm:gap-0">
    <p>
      This website is a simple calendar for live music in the Bay Area.
      Currently sourcing data from <a
        class="italic hover:underline"
        href="http://www.foopee.com/punk/the-list/"
        target="_blank"
        rel="nofollow noopener noreferrer">FooPee</a
      >'s "The List" every Monday.
    </p>
    <p>
      The source code, license, and security information is available in <a
        class="font-bold hover:underline"
        href="https://github.com/RP2/bay-punks"
        target="_blank"
        title="Bay Area Punk Shows (bay-punks) on GitHub"
        rel="nofollow noopener noreferrer">this GitHub repository</a
      >.
    </p>
    <p>
      Made with ðŸ–¤ by <a
        href="https://rileyperalta.com"
        class="hover:underline"
        target="_blank">Riley Peralta</a
      >.
    </p>
  </section>
  <section class="my-4 flex flex-col gap-4 sm:my-8 sm:gap-8">
    <Key />

    <!-- tabs wrapper with shadcn tabs -->
    <div class="w-full">
      <TabsWrapper client:load />

      <!-- days content (hidden by default, shown when days tab is active) -->
      <div id="days-content" class="tab-content" data-tab="days">
        <!-- Astro component for static pre-rendering -->
        <DayList />
      </div>

      <!-- artists content (hidden by default, shown when artists tab is active) -->
      <div id="artists-content" class="tab-content hidden" data-tab="artists">
        <ArtistList client:load />
      </div>

      <!-- venues content (hidden by default, shown when venues tab is active) -->
      <div id="venues-content" class="tab-content hidden" data-tab="venues">
        <VenueList client:load />
      </div>
    </div>
  </section>
</Layout>

<script>
  // Add TypeScript declaration for our global function
  declare global {
    interface Window {
      initDayCardToggles?: () => void;
    }
  }

  // Setup search functionality and handle tab changes
  document.addEventListener("DOMContentLoaded", () => {
    // get today's date in local timezone, normalized to start of day
    const today = new Date();
    const todayISOString =
      today.getFullYear() +
      "-" +
      String(today.getMonth() + 1).padStart(2, "0") +
      "-" +
      String(today.getDate()).padStart(2, "0");

    // Re-connect when tab changes (card connection is now handled directly in the DayList component)
    const tabsTriggers = document.querySelectorAll('[role="tab"]');
    tabsTriggers.forEach((trigger) => {
      trigger.addEventListener("click", () => {
        // Dispatch custom event to trigger card connection in DayList
        setTimeout(() => {
          const event = new CustomEvent("tabChanged");
          window.dispatchEvent(event);
        }, 50);
      });
    });

    // function to highlight matched text
    function highlightText(element: Element, query: string) {
      if (!query) return;

      // get all text nodes within the element
      const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        null,
      );

      const textNodes: Text[] = [];
      let node: Text | null;
      while ((node = walker.nextNode() as Text)) {
        textNodes.push(node);
      }

      // process each text node
      textNodes.forEach((textNode) => {
        const text = textNode.textContent || "";
        const regex = new RegExp(`(${query})`, "gi");
        const parts = text.split(regex);

        if (parts.length > 1) {
          const fragment = document.createDocumentFragment();
          parts.forEach((part, index) => {
            // when using split with a regex capturing group, matched parts are at odd indices
            if (index % 2 === 1) {
              const span = document.createElement("span");
              span.className = "bg-yellow-200 dark:bg-yellow-800";
              span.textContent = part;
              fragment.appendChild(span);
            } else {
              fragment.appendChild(document.createTextNode(part));
            }
          });
          textNode.parentNode?.replaceChild(fragment, textNode);
        }
      });
    }

    // function to restore original content
    function restoreOriginalContent(element: Element) {
      const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,
        null,
      );

      const nodes: Node[] = [];
      let node: Node | null;
      while ((node = walker.nextNode())) {
        nodes.push(node);
      }

      // first pass: replace highlight spans with text nodes
      nodes.forEach((node) => {
        if (node.nodeType === Node.ELEMENT_NODE) {
          const element = node as Element;
          if (
            element.tagName === "SPAN" &&
            (element.classList.contains("bg-yellow-200") ||
              element.classList.contains("bg-yellow-800"))
          ) {
            const text = element.textContent || "";
            const textNode = document.createTextNode(text);
            element.parentNode?.replaceChild(textNode, element);
          }
        }
      });

      // second pass: normalize the dom to merge adjacent text nodes
      element.normalize();
    }

    // get all cards with a data-day attribute
    const cards = document.querySelectorAll("[data-day]");

    cards.forEach((card) => {
      const isoDate = card.getAttribute("data-iso");
      if (isoDate) {
        // remove the card if the event date is before today (string comparison works for ISO dates)
        if (isoDate < todayISOString) {
          card.remove();
        } else {
          // otherwise, show the card
          card.classList.remove("invisible");
        }
      }
    });

    // filter cards based on search input (for events tab)
    const searchInput = document.getElementById("search");
    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const query = (e.target as HTMLInputElement)!.value.toLowerCase();

        // re-query cards each time to get only remaining cards in DOM
        const remainingCards = document.querySelectorAll("[data-day]");

        remainingCards.forEach((card) => {
          const date = card.getAttribute("data-day")?.toLowerCase() || "";
          const iso = card.getAttribute("data-iso")?.toLowerCase() || "";
          const venues = card.querySelectorAll(".venue");
          const artists = card.querySelectorAll(".artists");
          const extra = card.querySelectorAll(".event-extra");

          // check if the query matches the date, venue, or any artist
          const matches =
            date.includes(query) ||
            iso.includes(query) ||
            Array.from(venues).some((venue) =>
              venue.textContent?.toLowerCase().includes(query),
            ) ||
            Array.from(artists).some((artist) =>
              artist.textContent?.toLowerCase().includes(query),
            ) ||
            Array.from(extra).some((ex) =>
              ex.textContent?.toLowerCase().includes(query),
            );

          // show or hide the card based on the match
          (card as HTMLElement).style.display = matches ? "block" : "none";

          // always restore original content first to remove previous highlighting
          venues.forEach((venue) => {
            restoreOriginalContent(venue);
          });
          artists.forEach((artist) => {
            restoreOriginalContent(artist);
          });
          extra.forEach((extraElement) => {
            restoreOriginalContent(extraElement);
          });

          // then apply highlighting if there's a query
          if (query && matches) {
            venues.forEach((venue) => {
              highlightText(venue, query);
            });
            artists.forEach((artist) => {
              highlightText(artist, query);
            });
            extra.forEach((extraElement) => {
              highlightText(extraElement, query);
            });
          }
        });
      });
    }

    // if no cards remain, show a fallback message
    const container = document.getElementById("concert-list");
    const remainingCards = document.querySelectorAll("[data-day]");
    if (container && remainingCards.length === 0) {
      container.innerHTML =
        "<p class='col-span-full text-center text-muted-foreground'>No upcoming concerts available, yell at Riley to fix it.</p>";
    }
  });
</script>
