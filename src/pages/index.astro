---
import Layout from "../layouts/Layout.astro";
import Concerts from "../data/concerts.json";
import Footer from "../components/Footer.astro";
import Card from "../components/Card.astro";
import Key from "../components/Key.astro";
import { Input } from "@/components/ui/input";
---

<Layout title="Upcoming Concerts" description="bay area punk shows">
  <h1 class="text-6xl font-bold uppercase">Upcoming Punk Shows</h1>
  <section class="mt-4 flex flex-col gap-2 text-lg sm:gap-0">
    <p>
      This website is a simple list of upcoming <strike>punk</strike> shows in the
      Bay Area. Currently sourcing data from <a
        class="italic hover:underline"
        href="http://www.foopee.com/punk/the-list/"
        target="_blank"
        rel="nofollow noopener noreferrer">FooPee</a
      >'s "The List" on the 1<sup>st</sup> of every month.
    </p>
    <p>
      The source code, license, and security information is available in <a
        class="font-bold hover:underline"
        href="https://github.com/RP2/bay-punks"
        target="_blank"
        title="Bay Area Punk Shows (bay-punks) on GitHub"
        rel="nofollow noopener noreferrer">this GitHub repository</a
      >.
    </p>
    <p>
      Made with ðŸ–¤ by <a
        href="https://rileyperalta.com"
        class="hover:underline"
        target="_blank">Riley Peralta</a
      >.
    </p>
  </section>
  <section class="my-4 flex flex-col gap-4 sm:my-8 sm:gap-8">
    <Key />
    <Input />
  </section>
  <section id="concert-list">
    {
      Object.entries(Concerts).map(([, days]) => (
        <div class="mb-8">
          <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            {days.map((day) => (
              <Card day={day} />
            ))}
          </div>
        </div>
      ))
    }
  </section>
  <Footer />
</Layout>

<script>
  // remove past days from the dom
  document.addEventListener("DOMContentLoaded", () => {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // normalize to midnight

    // get all cards with a data-day attribute
    const cards = document.querySelectorAll("[data-day]");
    cards.forEach((card) => {
      const day = card.getAttribute("data-day");
      if (day) {
        // parse the human-readable date string into a Date object
        const [_, month, date] = day.split(" ");
        const monthIndex = [
          "jan",
          "feb",
          "mar",
          "apr",
          "may",
          "jun",
          "jul",
          "aug",
          "sep",
          "oct",
          "nov",
          "dec",
        ].indexOf(month.toLowerCase());
        const eventDate = new Date(
          today.getFullYear(),
          monthIndex,
          parseInt(date, 10),
        );

        // handle year rollover for december to january
        if (monthIndex === 0 && today.getMonth() === 11) {
          eventDate.setFullYear(today.getFullYear() + 1);
        }

        // remove the card if the event date is in the past
        if (eventDate < today) {
          card.remove();
        } else {
          // otherwise, show the card
          card.classList.remove("invisible");
        }
      }
    });

    // filter cards based on search input
    const searchInput = document.getElementById("search");
    searchInput!.addEventListener("input", (e) => {
      const query = (e.target as HTMLInputElement)!.value.toLowerCase();

      cards.forEach((card) => {
        const date = card.getAttribute("data-day")?.toLowerCase() || "";
        const venue =
          card.querySelector(".venue")?.textContent?.toLowerCase() || "";
        const artists = Array.from(card.querySelectorAll(".artists")).map(
          (artist) => artist.textContent?.toLowerCase() || "",
        );

        // check if the query matches the date, venue, or any artist
        const matches =
          date.includes(query) ||
          venue.includes(query) ||
          artists.some((artist) => artist.includes(query));

        // show or hide the card based on the match
        (card as HTMLElement).style.display = matches ? "block" : "none";
      });
    });

    // if no cards remain, show a fallback message
    const container = document.getElementById("concert-list");
    if (container && container.children.length === 0) {
      container.innerHTML =
        "<p>No upcoming concerts available, yell at Riley to fix it.</p>";
    }
  });
</script>
