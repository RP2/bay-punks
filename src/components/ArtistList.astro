---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { GenreCombobox } from "@/components/ui/combobox";
import { Input } from "@/components/ui/input";
import { ArtistSortToggle } from "./SortToggle";
import artists from "../data/artists.json";
import concerts from "../data/calendar.json";

function getNextShowForArtist(artistName: string, artistId?: string) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const upcomingShows = concerts.shows
    .flatMap((show) =>
      show.events
        .filter((event) =>
          event.bands.some(
            (band) =>
              (artistId && band.id === artistId) ||
              normalizeText(band.text) === normalizeText(artistName),
          ),
        )
        .map((event) => ({
          ...event,
          date: show.normalizedDate,
          humanDate: show.day,
        })),
    )
    .filter((show) => {
      // create date from YYYY-MM-DD format, ensuring we compare properly
      const [year, month, day] = show.date.split("-").map(Number);
      const showDate = new Date(year, month - 1, day); // month is 0-indexed
      return showDate >= today;
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

  return upcomingShows[0] || null;
}

function normalizeText(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, "")
    .trim();
}

// sorting functions for different sort orders
function sortArtists(artistList: any[], sortKey: string) {
  const artistsCopy = [...artistList];

  switch (sortKey) {
    case "alphabetical":
      return artistsCopy.sort((a, b) => {
        return a.name.localeCompare(b.name, undefined, { sensitivity: "base" });
      });

    case "reverse-alphabetical":
      return artistsCopy.sort((a, b) => {
        return b.name.localeCompare(a.name, undefined, { sensitivity: "base" });
      });

    case "next-show":
      return artistsCopy.sort((a, b) => {
        const nextShowA = getNextShowForArtist(a.name, a.id);
        const nextShowB = getNextShowForArtist(b.name, b.id);

        // artists with no upcoming shows go to the end
        if (!nextShowA && !nextShowB) return 0;
        if (!nextShowA) return 1;
        if (!nextShowB) return -1;

        // sort by date
        return (
          new Date(nextShowA.date).getTime() -
          new Date(nextShowB.date).getTime()
        );
      });

    default:
      return artistsCopy;
  }
}

// default to next-show sort (soonest shows first)
const initialSortedArtists = sortArtists(artists.artists, "next-show");

// prepare artist data for client-side use, include genres
const artistDataForClient = initialSortedArtists.map((artist) => ({
  id: artist.id,
  name: artist.name,
  lastSeen: artist.lastSeen,
  spotifyUrl: artist.spotifyUrl,
  searchUrl: artist.searchUrl,
  nextShow: getNextShowForArtist(artist.name, artist.id),
  genres: artist.spotifyData?.genres || [],
}));
---

<div class="space-y-4">
  <div
    class="flex flex-col gap-2 md:flex-row md:items-center md:justify-between"
  >
    <h2 class="text-2xl font-bold">
      Artists (<span id="artist-count">{initialSortedArtists.length}</span>)
    </h2>
    <div class="flex w-full flex-row gap-2 md:mt-0 md:w-auto">
      <GenreCombobox
        className="h-12 flex-1 md:w-auto md:flex-initial"
        client:load
      />
      <ArtistSortToggle
        className="h-12 flex-1 md:w-auto md:flex-initial"
        client:load
      />
    </div>
  </div>
  <div class="mb-4">
    <Input
      id="artist-search"
      placeholder="Search artists..."
      className="w-full"
    />
  </div>
  <div
    id="artist-list"
    class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3"
  >
    {
      initialSortedArtists.map((artist) => {
        const nextShow = getNextShowForArtist(artist.name, artist.id);
        return (
          <Card
            className="artist-item h-full"
            data-artist-name={artist.name.toLowerCase()}
          >
            <CardContent className="p-4">
              <div class="flex flex-col gap-2">
                <div class="flex items-start justify-between">
                  <a
                    href={`/artist/${artist.id}/`}
                    class="text-primary font-semibold hover:underline"
                  >
                    {artist.name}
                  </a>
                </div>

                {nextShow && (
                  <div class="text-sm">
                    <div class="text-muted-foreground">Next show:</div>
                    <div class="font-medium">
                      <a
                        href={`/day/${nextShow.date}/`}
                        class="text-primary hover:underline"
                      >
                        {nextShow.humanDate}
                      </a>
                    </div>
                    <div class="text-muted-foreground text-xs">
                      {nextShow.venue.text}
                    </div>
                  </div>
                )}

                {!nextShow && (
                  <div class="text-muted-foreground text-sm">
                    No upcoming shows
                  </div>
                )}

                <div class="mt-2 flex items-center justify-end">
                  {(artist.spotifyUrl || artist.searchUrl) && (
                    <a
                      href={artist.spotifyUrl || artist.searchUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center gap-1 text-xs text-green-600 transition-colors hover:text-green-700 hover:underline"
                      title={
                        artist.spotifyUrl
                          ? "Listen on Spotify (automated verification - may not be 100% accurate)"
                          : "Search on Spotify"
                      }
                    >
                      <svg
                        class="h-3 w-3"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                      >
                        <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z" />
                      </svg>
                      {artist.spotifyUrl ? "Spotify" : "Search"}
                    </a>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        );
      })
    }
  </div>
</div>

<script define:vars={{ artistDataForClient }}>
  // pass artist data to client-side script
  window.artistsData = artistDataForClient;
</script>

<script>
  // artist search, sort, and genre filter functionality
  declare global {
    interface Window {
      artistsData: any[];
      handleArtistSortChange?: (sortKey: string) => void;
      handleArtistGenreChange?: (genre: string) => void;
      selectedGenre?: string;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById(
      "artist-search",
    ) as HTMLInputElement;
    const artistList = document.getElementById("artist-list");

    // initialize artist data
    const artistsData = window.artistsData || [];
    // set up initial sort key tracking
    (window as any).currentSortKey = "next-show";
    // set up initial genre tracking
    window.selectedGenre = "";
    // keep combobox in sync with selectedGenre
    function updateGenreCombobox() {
      const combobox = document.querySelector('[role="combobox"]');
      if (combobox) {
        combobox.setAttribute(
          "data-selected-genre",
          window.selectedGenre || "",
        );
        combobox
          .querySelector("span")
          ?.replaceWith(
            document.createTextNode(window.selectedGenre || "Select genre..."),
          );
      }
    }

    // sort artists function
    function sortArtists(artistList: any[], sortKey: string) {
      const artistsCopy = [...artistList];
      switch (sortKey) {
        case "alphabetical":
          return artistsCopy.sort((a, b) => {
            return a.name.localeCompare(b.name, undefined, {
              sensitivity: "base",
            });
          });
        case "reverse-alphabetical":
          return artistsCopy.sort((a, b) => {
            return b.name.localeCompare(a.name, undefined, {
              sensitivity: "base",
            });
          });
        case "next-show":
          return artistsCopy.sort((a, b) => {
            // artists with no upcoming shows go to the end
            if (!a.nextShow && !b.nextShow) return 0;
            if (!a.nextShow) return 1;
            if (!b.nextShow) return -1;
            // sort by date
            return (
              new Date(a.nextShow.date).getTime() -
              new Date(b.nextShow.date).getTime()
            );
          });
        default:
          return artistsCopy;
      }
    }

    // filter by genre
    function filterByGenre(artists: any[], genre: string): any[] {
      if (!genre) return artists;
      return artists.filter(
        (artist) =>
          Array.isArray(artist.genres) && artist.genres.includes(genre),
      );
    }

    // render artists function
    function renderArtists(artists: any[]): void {
      if (!artistList) return;
      artistList.innerHTML = artists
        .map(
          (artist) => `
        <div class="bg-card text-card-foreground flex flex-col gap-2 rounded-xl border py-6 shadow-sm artist-item h-full" data-artist-name="${artist.name.toLowerCase()}" data-slot="card">
          <div class="px-4 sm:px-6 p-4" data-slot="card-content">
              <div class="flex flex-col gap-2">
                <div class="flex items-start justify-between">
                  <a href="/artist/${artist.id}/" class="text-primary font-semibold hover:underline">
                    ${artist.name}
                  </a>
                </div>
                ${
                  artist.nextShow
                    ? `
                  <div class="text-sm">
                    <div class="text-muted-foreground">Next show:</div>
                    <div class="font-medium">
                      <a href="/day/${artist.nextShow.date}/" class="text-primary hover:underline">
                        ${artist.nextShow.humanDate}
                      </a>
                    </div>
                    <div class="text-muted-foreground text-xs">
                      ${artist.nextShow.venue.text}
                    </div>
                  </div>
                `
                    : `
                  <div class="text-muted-foreground text-sm">
                    No upcoming shows
                  </div>
                `
                }
                <div class="mt-2 flex items-center justify-end">
                  ${
                    artist.spotifyUrl || artist.searchUrl
                      ? `
                    <a
                      href="${artist.spotifyUrl || artist.searchUrl}"
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center gap-1 text-xs text-green-600 transition-colors hover:text-green-700 hover:underline"
                      title="${artist.spotifyUrl ? "Listen on Spotify" : "Search on Spotify"}"
                    >
                      <svg class="h-3 w-3" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z" />
                      </svg>
                      ${artist.spotifyUrl ? "Spotify" : "Search"}
                    </a>
                  `
                      : ""
                  }
                </div>
              </div>
            </div>
        </div>
      `,
        )
        .join("");
      // update artist count
      const countEl = document.getElementById("artist-count");
      if (countEl) countEl.textContent = String(artists.length);
    }

    // handle sort change
    window.handleArtistSortChange = (sortKey: string) => {
      (window as any).currentSortKey = sortKey;
      let filtered = filterByGenre(artistsData, window.selectedGenre || "");
      const sortedArtists = sortArtists(filtered, sortKey);
      renderArtists(sortedArtists);
      // reapply search filter if there's a search query
      if (searchInput && searchInput.value) {
        const query = searchInput.value.toLowerCase();
        const artistItems =
          document.querySelectorAll<HTMLElement>(".artist-item");
        artistItems.forEach((item) => {
          const artistName = item.getAttribute("data-artist-name") || "";
          const matches = artistName.includes(query);
          item.style.display = matches ? "block" : "none";
        });
      }
    };

    // handle genre change
    window.handleArtistGenreChange = (genre: string) => {
      window.selectedGenre = genre;
      updateGenreCombobox();
      let filtered = filterByGenre(artistsData, genre);
      // use the current sort key
      const sortKey = (window as any).currentSortKey || "next-show";
      const sortedArtists = sortArtists(filtered, sortKey);
      renderArtists(sortedArtists);
      // reapply search filter if there's a search query
      if (searchInput && searchInput.value) {
        const query = searchInput.value.toLowerCase();
        const artistItems =
          document.querySelectorAll<HTMLElement>(".artist-item");
        artistItems.forEach((item) => {
          const artistName = item.getAttribute("data-artist-name") || "";
          const matches = artistName.includes(query);
          item.style.display = matches ? "block" : "none";
        });
      }
    };

    // search functionality
    if (searchInput) {
      searchInput.addEventListener("input", (e: Event) => {
        const query = (e.target as HTMLInputElement).value.toLowerCase();
        const artistItems =
          document.querySelectorAll<HTMLElement>(".artist-item");
        artistItems.forEach((item) => {
          const artistName = item.getAttribute("data-artist-name") || "";
          const matches = artistName.includes(query);
          item.style.display = matches ? "block" : "none";
        });
      });
    }
  });
</script>
