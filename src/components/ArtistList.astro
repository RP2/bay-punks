---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Input } from "@/components/ui/input";
import artists from "../data/artists.json";
import concerts from "../data/concerts.json";

// sort artists by show count (most shows first), then alphabetically
const sortedArtists = [...artists.artists].sort((a, b) => {
  if (a.showCount !== b.showCount) {
    return b.showCount - a.showCount;
  }
  return a.name.localeCompare(b.name, undefined, { sensitivity: "base" });
});

// get next show date for each artist
const today = new Date();
today.setHours(0, 0, 0, 0);

function getNextShowForArtist(artistName: string) {
  const upcomingShows = concerts.shows
    .flatMap((show) =>
      show.events
        .filter((event) =>
          event.bands.some(
            (band) => normalizeText(band.text) === normalizeText(artistName),
          ),
        )
        .map((event) => ({
          ...event,
          date: show.normalizedDate,
          humanDate: show.day,
        })),
    )
    .filter((show) => new Date(show.date) >= today)
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

  return upcomingShows[0] || null;
}

function normalizeText(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, "")
    .trim();
}
---

<div class="space-y-4">
  <div class="flex items-center justify-between">
    <h2 class="text-2xl font-bold">Artists ({sortedArtists.length})</h2>
  </div>

  <div class="mb-4">
    <Input
      id="artist-search"
      placeholder="Search artists..."
      className="w-full"
    />
  </div>
  <div
    id="artist-list"
    class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3"
  >
    {
      sortedArtists.map((artist) => {
        const nextShow = getNextShowForArtist(artist.name);
        return (
          <Card
            className="artist-item"
            data-artist-name={artist.name.toLowerCase()}
          >
            <CardContent className="p-4">
              <div class="flex flex-col gap-2">
                <div class="flex items-start justify-between">
                  <a
                    href={`/artist/${artist.id}`}
                    class="text-primary font-semibold hover:underline"
                  >
                    {artist.name}
                  </a>
                  <span class="text-muted-foreground text-xs">
                    {artist.showCount} shows
                  </span>
                </div>

                {nextShow && (
                  <div class="text-sm">
                    <div class="text-muted-foreground">Next show:</div>
                    <div class="font-medium">
                      <a
                        href={`/day/${nextShow.date}`}
                        class="text-primary hover:underline"
                      >
                        {nextShow.humanDate}
                      </a>
                    </div>
                    <div class="text-muted-foreground text-xs">
                      {nextShow.venue.text}
                    </div>
                  </div>
                )}

                {!nextShow && (
                  <div class="text-muted-foreground text-sm">
                    No upcoming shows
                  </div>
                )}

                <div class="mt-2 flex items-center justify-between">
                  <div class="text-muted-foreground text-xs">
                    Last seen: {new Date(artist.lastSeen).toLocaleDateString()}
                  </div>
                  {artist.searchUrl && (
                    <a
                      href={artist.searchUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center gap-1 text-xs text-green-600 transition-colors hover:text-green-700 hover:underline"
                      title="Listen on Spotify"
                    >
                      <svg
                        class="h-3 w-3"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                      >
                        <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z" />
                      </svg>
                      Spotify
                    </a>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        );
      })
    }
  </div>
</div>

<script>
  // artist search functionality
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById(
      "artist-search",
    ) as HTMLInputElement;
    const artistItems = document.querySelectorAll(".artist-item");

    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const query = (e.target as HTMLInputElement).value.toLowerCase();

        artistItems.forEach((item) => {
          const artistName = item.getAttribute("data-artist-name") || "";
          const matches = artistName.includes(query);
          (item as HTMLElement).style.display = matches ? "block" : "none";
        });
      });
    }
  });
</script>
