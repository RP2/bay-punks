---
import { Card, CardContent } from "@/components/ui/card";
import { getVenueId } from "../lib/data-utils";
import { AddToCalendarButton } from "./AddToCalendarButton";

interface Props {
  day: { day: string; events: any[]; normalizedDate: string };
}
const { day } = Astro.props;

// helper to format day string with full month and day names
function formatDayWithFullMonth(dayString: string): string {
  const monthMap: { [key: string]: string } = {
    jan: "January",
    feb: "February",
    mar: "March",
    apr: "April",
    may: "May",
    jun: "June",
    jul: "July",
    aug: "August",
    sep: "September",
    oct: "October",
    nov: "November",
    dec: "December",
  };

  const dayMap: { [key: string]: string } = {
    sun: "Sunday",
    mon: "Monday",
    tue: "Tuesday",
    wed: "Wednesday",
    thu: "Thursday",
    fri: "Friday",
    sat: "Saturday",
  };

  const parts = dayString.split(" ");
  if (parts.length >= 3) {
    const dayOfWeek = parts[0].toLowerCase();
    const month = parts[1].toLowerCase();
    const date = parts[2];
    const fullDayOfWeek = dayMap[dayOfWeek] || parts[0];
    const fullMonth = monthMap[month] || parts[1];
    return `${fullDayOfWeek} ${fullMonth} ${date}`;
  }
  return dayString;
}

const formattedDay = formatDayWithFullMonth(day.day);
---

<Card
  className="event-item card h-full"
  data-day={day.day}
  data-iso={day.normalizedDate}
>
  <CardContent className="p-4">
    <div class="flex flex-col gap-2">
      <div class="flex items-start justify-between">
        <a
          href={`/day/${day.normalizedDate}/`}
          class="text-primary text-lg font-semibold hover:underline"
        >
          {formattedDay}
        </a>
        <span class="text-muted-foreground text-xs">
          {day.events.length} events
        </span>
      </div>

      <div class="space-y-3">
        <ul
          class="events-list space-y-2 overflow-hidden transition-all duration-300"
        >
          {/* Initial events (always visible) */}
          {
            day.events.slice(0, 2).map(
              (
                event: {
                  venue: {
                    href: string | URL | null | undefined;
                    text: unknown;
                  };
                  bands: any[];
                  extra: unknown;
                },
                index: number,
              ) => (
                <li class={`event-item text-sm`}>
                  <div class="venue font-medium">
                    {(() => {
                      const venueId = getVenueId(event.venue as any);
                      return venueId ? (
                        <a class="hover:underline" href={`/venue/${venueId}/`}>
                          {event.venue.text}
                        </a>
                      ) : (
                        event.venue.text
                      );
                    })()}
                  </div>
                  <div class="text-muted-foreground artists text-xs">
                    {event.bands
                      .slice(0, 3)
                      .map((band) => band.text)
                      .join(", ")}
                  </div>
                  {event.extra && (
                    <div class="text-muted-foreground event-extra text-xs">
                      {event.extra}
                    </div>
                  )}
                  <AddToCalendarButton
                    client:load
                    title={event.bands.map((band) => band.text).join(", ")}
                    date={day.normalizedDate}
                    venue={String(event.venue.text)}
                    description={event.extra ? String(event.extra) : ""}
                  />
                </li>
              ),
            )
          }

          {/* Additional events (hidden by default) */}
          {
            day.events.length > 2 && (
              <div class="additional-events hidden">
                {day.events.slice(2).map(
                  (
                    event: {
                      venue: {
                        href: string | URL | null | undefined;
                        text: unknown;
                      };
                      bands: any[];
                      extra: unknown;
                    },
                    index: number,
                  ) => (
                    <li class={`event-item mt-2 text-sm`}>
                      <div class="venue font-medium">
                        {(() => {
                          const venueId = getVenueId(event.venue as any);
                          return venueId ? (
                            <a
                              class="hover:underline"
                              href={`/venue/${venueId}/`}
                            >
                              {event.venue.text}
                            </a>
                          ) : (
                            event.venue.text
                          );
                        })()}
                      </div>
                      <div class="text-muted-foreground artists text-xs">
                        {event.bands
                          .slice(0, 3)
                          .map((band) => band.text)
                          .join(", ")}
                      </div>
                      {event.extra && (
                        <div class="text-muted-foreground event-extra text-xs">
                          {event.extra}
                        </div>
                      )}
                      <AddToCalendarButton
                        client:load
                        title={event.bands.map((band) => band.text).join(", ")}
                        date={day.normalizedDate}
                        venue={String(event.venue.text)}
                        description={event.extra ? String(event.extra) : ""}
                      />
                    </li>
                  ),
                )}
              </div>
            )
          }
        </ul>
        {
          day.events.length > 2 && (
            <button
              type="button"
              class="expand-toggle text-muted-foreground hover:text-foreground inline-block cursor-pointer gap-1 text-xs hover:underline"
              aria-expanded="false"
            >
              <span class="toggle-icon">+</span>
              <span class="toggle-text">
                {day.events.length - 2} more events
              </span>
            </button>
          )
        }
      </div>
    </div>
  </CardContent>
</Card>

<script>
  // Function to set up expand/collapse functionality for a specific button
  function setupToggleButton(button: Element) {
    button.addEventListener("click", (e) => {
      e.preventDefault();

      // Find the parent card
      const card =
        (button as HTMLElement).closest(".card") ||
        (button as HTMLElement).closest(".event-item");
      if (!card) return;

      // Find the additional events container
      const additionalEvents = card.querySelector(".additional-events");
      if (!additionalEvents) return;

      // Toggle visibility
      additionalEvents.classList.toggle("hidden");

      // Update button text and icon
      const toggleIcon = button.querySelector(".toggle-icon");
      const toggleText = button.querySelector(".toggle-text");

      if (additionalEvents.classList.contains("hidden")) {
        // Collapsed state
        if (toggleIcon) toggleIcon.textContent = "+";
        if (toggleText) {
          // Get the stored count, fallback to the original count
          const count = toggleText.getAttribute("data-original-count");
          if (count && !isNaN(parseInt(count))) {
            toggleText.textContent = `${count} more events`;
          }
        }
        button.setAttribute("aria-expanded", "false");
      } else {
        // Expanded state
        if (toggleIcon) toggleIcon.textContent = "-";
        if (toggleText) {
          // Store the original count if not already stored
          if (
            !toggleText.hasAttribute("data-original-count") &&
            toggleText.textContent
          ) {
            const countText = toggleText.textContent.trim();
            const originalCount = countText.split(" ")[0];
            if (originalCount && !isNaN(parseInt(originalCount))) {
              toggleText.setAttribute("data-original-count", originalCount);
            }
          }
          toggleText.textContent = "Collapse";
        }
        button.setAttribute("aria-expanded", "true");
      }
    });
  }

  // Initialize expand/collapse functionality for events
  function initializeToggleButtons() {
    // Get all expand toggle buttons
    const toggleButtons = document.querySelectorAll(".expand-toggle");

    // Add click handler to each button
    toggleButtons.forEach((button) => {
      setupToggleButton(button);
    });
  }

  // Run on initial load
  document.addEventListener("DOMContentLoaded", initializeToggleButtons);

  // Expose the function globally so it can be called after DOM manipulation
  if (typeof window !== "undefined") {
    (window as any).initDayCardToggles = initializeToggleButtons;
  }
</script>
