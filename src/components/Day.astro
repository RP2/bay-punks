---
import { Card, CardContent } from "@/components/ui/card";
import { getVenueId } from "../lib/data-utils";
import { AddToCalendarButton } from "./AddToCalendarButton";

interface Props {
  day: { day: string; events: any[]; normalizedDate: string };
}
const { day } = Astro.props;

// helper to format day string with full month and day names
function formatDayWithFullMonth(dayString: string): string {
  const monthMap: { [key: string]: string } = {
    jan: "January",
    feb: "February",
    mar: "March",
    apr: "April",
    may: "May",
    jun: "June",
    jul: "July",
    aug: "August",
    sep: "September",
    oct: "October",
    nov: "November",
    dec: "December",
  };

  const dayMap: { [key: string]: string } = {
    sun: "Sunday",
    mon: "Monday",
    tue: "Tuesday",
    wed: "Wednesday",
    thu: "Thursday",
    fri: "Friday",
    sat: "Saturday",
  };

  const parts = dayString.split(" ");
  if (parts.length >= 3) {
    const dayOfWeek = parts[0].toLowerCase();
    const month = parts[1].toLowerCase();
    const date = parts[2];
    const fullDayOfWeek = dayMap[dayOfWeek] || parts[0];
    const fullMonth = monthMap[month] || parts[1];
    return `${fullDayOfWeek} ${fullMonth} ${date}`;
  }
  return dayString;
}

const formattedDay = formatDayWithFullMonth(day.day);
---

<Card
  className="event-item invisible"
  data-day={day.day}
  data-iso={day.normalizedDate}
>
  <CardContent className="p-4">
    <div class="flex flex-col gap-2">
      <div class="flex items-start justify-between">
        <a
          href={`/day/${day.normalizedDate}/`}
          class="text-primary text-lg font-semibold hover:underline"
        >
          {formattedDay}
        </a>
        <span class="text-muted-foreground text-xs">
          {day.events.length} events
        </span>
      </div>

      <div class="space-y-3">
        <ul
          class="events-list space-y-2 overflow-hidden transition-all duration-300"
          style="max-height: 180px;"
        >
          {
            day.events.slice(0, 2).map(
              (
                event: {
                  venue: {
                    href: string | URL | null | undefined;
                    text: unknown;
                  };
                  bands: any[];
                  extra: unknown;
                },
                index: number,
              ) => (
                <li class={`event-item text-sm`}>
                  <div class="venue font-medium">
                    {(() => {
                      const venueId = getVenueId(event.venue as any);
                      return venueId ? (
                        <a class="hover:underline" href={`/venue/${venueId}/`}>
                          {event.venue.text}
                        </a>
                      ) : (
                        event.venue.text
                      );
                    })()}
                  </div>
                  <div class="text-muted-foreground artists text-xs">
                    {event.bands
                      .slice(0, 3)
                      .map((band) => band.text)
                      .join(", ")}
                  </div>
                  {event.extra && (
                    <div class="text-muted-foreground event-extra text-xs">
                      {event.extra}
                    </div>
                  )}
                  <AddToCalendarButton
                    client:load
                    title={event.bands.map((band) => band.text).join(", ")}
                    date={day.normalizedDate}
                    venue={String(event.venue.text)}
                    description={event.extra ? String(event.extra) : ""}
                  />
                </li>
              ),
            )
          }
        </ul>
        {
          day.events.length > 2 && (
            <a
              href={`/day/${day.normalizedDate}/`}
              class="expand-toggle text-muted-foreground hover:text-foreground text-xs hover:underline"
            >
              +{day.events.length - 2} more events
            </a>
          )
        }
      </div>
    </div>
  </CardContent>
</Card>
